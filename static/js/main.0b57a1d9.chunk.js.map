{"version":3,"sources":["images/burger.png","App.js","reportWebVitals.js","index.js"],"names":["flyfrogsAddress","App","useState","quantity","setQuantity","minting","setMinting","frogIds","setFrogIds","account","setAccount","isPaused","setIsPaused","totalMinted","setTotalMinted","statusAlert","setStatusAlert","a","window","ethereum","request","method","getFlyFrogs","provider","ethers","getDefaultProvider","contract","Contract","FlyFrogs","abi","paused","totalSupply","total","toString","console","log","providers","Web3Provider","balanceOf","balance","tokenIndex","tokenOfOwnerByIndex","tokenId","push","signer","getSigner","mint","value","utils","parseEther","transaction","wait","message","useEffect","getIsPaused","getQuantityContent","max","content","i","className","onClick","substring","src","frog1","alt","href","target","rel","disabled","onChange","e","parseInt","length","frogs","images","map","x","openSeaLink","width","renderFrogs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b57a1d9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/burger.f991476d.png\";","import './App.css';\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { BiLoaderAlt } from 'react-icons/bi';\nimport { SiTwitter } from 'react-icons/si';\nimport { SiDiscord } from 'react-icons/si';\nimport FlyFrogs from './artifacts/contracts/FlyFrogs.sol/FlyFrogs.json';\nimport frog1 from './images/burger.png';\n\n// Update with the contract address logged out to the CLI when it was deployed\nconst flyfrogsAddress = \"0x31d4Da52c12542AC3D6aAdbA5ed26a3A563a86Dc\";\nconst openSeaLink = \"https://opensea.io/\";\nconst etherscanLink = \"https://etherscan.io/token/0x31d4Da52c12542AC3D6aAdbA5ed26a3A563a86Dc?a=\";\n\nfunction App() {\n  // store quantity in local state\n  const [quantity, setQuantity] = useState(1);\n  const [minting, setMinting] = useState(false);\n  const [frogIds, setFrogIds] = useState([]);\n  const [account, setAccount] = useState();\n  const [isPaused, setIsPaused] = useState(false);\n  const [totalMinted, setTotalMinted] = useState(0);\n  const [statusAlert, setStatusAlert] = useState();\n  \n  useEffect(() => {\n    getIsPaused();\n  }, []);\n  \n  // request access to the user's MetaMask account\n  async function getAccount() {\n    if (typeof window.ethereum !== 'undefined') {\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      setAccount(account);\n      getFlyFrogs();\n    }\n  }\n  \n  async function getIsPaused() {\n    const provider = ethers.getDefaultProvider();\n    const contract = new ethers.Contract(flyfrogsAddress, FlyFrogs.abi, provider);\n    try {\n      const paused = await contract.isPaused();\n      const total = await contract.totalSupply();\n      setIsPaused(paused);\n      setTotalMinted(total.toString());\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async function getFlyFrogs() {\n    if (typeof window.ethereum !== 'undefined') {\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(flyfrogsAddress, FlyFrogs.abi, provider);\n      let frogIds = [];\n      try {\n        const balance = await contract.balanceOf(account);\n        for (let tokenIndex = 0; tokenIndex < balance; tokenIndex++) {\n            const tokenId = await contract.tokenOfOwnerByIndex(account, tokenIndex);\n            frogIds.push(tokenId.toString());\n        }\n      } catch (e) {\n        console.log(e);\n      }\n      setFrogIds(frogIds);\n    }\n  }\n\n  async function mintFrogs() {\n    if (typeof window.ethereum !== 'undefined') {\n      setMinting(true);\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(flyfrogsAddress, FlyFrogs.abi, signer);\n      const total = (quantity * 0.022).toString();\n      try {\n        const transaction = await contract.mint(account, quantity, {value: ethers.utils.parseEther(total)});\n        await transaction.wait();\n        setStatusAlert(null);\n      } catch (e) {\n        setStatusAlert(`Error: ${e.message}`);\n        setMinting(false);\n      }\n      setMinting(false);\n      getFlyFrogs();\n    } else {\n      setStatusAlert('Please connect with MetaMask.');\n    }\n  }\n  \n  const  renderFrogs = frogs => {\n    let message = `Congrats! You are the proud owner of ${frogs.length} Fly Frog.`\n    if (parseInt(frogs.length) > 1) {\n      message = `Congrats! You are the proud owner of ${frogs.length} Fly Frogs.`\n    }\n    const images = frogs.map((x) =>\n      <li key={x}><a href={openSeaLink+'assets/'+flyfrogsAddress+\"/\"+x} target=\"_blank\" rel=\"noreferrer\"><img src={\"https://gateway.pinata.cloud/ipfs/QmTubGm6aKcjgTutgk7whbhXKeW42dHQmdXwp4GbbWxtTF/flyfrog\"+x+\".png\"} alt={\"Fly Frog \"+x} width=\"200\" /></a><span>Fly Frog {x}</span></li>\n    );\n    return (\n      <div className=\"Frog-pond\">\n        <p>\n          {message} <a className=\"App-link\" href={etherscanLink+account} target=\"_blank\" rel=\"noreferrer\">View on Etherscan â†’</a>\n        </p>\n        <ul className=\"Frog-pond-list\">{images}</ul>\n      </div>);\n  }\n  \n  const getQuantityContent = max => {\n    let content = [];\n    for (let i = 1; i <= max; i++) {\n      content.push(<option key={i} value={i}>{i}</option>);\n    }\n    return content;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"App-container\">\n          <div className=\"flex\">\n            <div className=\"flex-item\">\n              <button onClick={getAccount}>{account ? account.substring(0, 6) + '...' + account.substring(38) : 'Connect Wallet'}</button>\n              <h1 className=\"App-heading\">Fly Frogs</h1>\n              <p>\n                The future is amphibious, ribbit.<br />\n                <strong>{totalMinted ? totalMinted : `--`}</strong> / 10,000\n              </p>\n            </div>\n            <div className=\"flex-item\">\n              <img src={frog1} alt=\"Fly Frog with burger hat\" />\n            </div>\n          </div>\n        </div>\n      </header>\n      <section className=\"App-mint\">\n        <div className=\"App-container\">\n            <div>\n                <p>\n                  {isPaused ? <strong>Minting begins Sept. 3 at 4pm EST!<br /></strong>: null}\n                  Price: 0.022 ETH + gas. Limit 30 per transaction.\n                </p>\n                {statusAlert\n                  ? <p className=\"error\">\n                      {statusAlert}<br />\n                      <a href=\"http://discord.gg/kfp4xftqKM\" target=\"_blank\" className=\"App-link\" rel=\"noreferrer\">Hop over to our Discord for support.</a>\n                    </p>\n                  : null\n                }\n                {isPaused\n                  ? <div>\n                    <select disabled value={quantity}>\n                      {getQuantityContent(30)}\n                    </select>\n                    <button disabled>\n                      Mint!\n                    </button>\n                  </div>\n                  : <div>\n                    <select onChange={e => setQuantity(e.target.value)} value={quantity}>\n                      {getQuantityContent(30)}\n                    </select>\n                    <button onClick={mintFrogs}>\n                      {minting ? <BiLoaderAlt className=\"spinning\" /> : \"Mint!\"}\n                    </button>\n                    <p><em>Hurry, only {10000 - parseInt(totalMinted)} left!</em></p>\n                  </div>\n                }\n              </div>\n          {frogIds.length > 0 ? renderFrogs(frogIds) : ''}\n        </div>\n      </section>\n      <section className=\"App-about\">\n        <div className=\"App-container\">\n          <h2>Come on get hoppy!</h2>\n          <p>\n            Fly Frogs are a collection of 10,000 randomly generated NFTs. No two frogs are exactly alike. The frogs are composed of 180+ hand-drawn assets across 6 traits:\n          </p>\n          <ul>\n            <li>backgrounds (25)</li>\n            <li>skins (23)</li>\n            <li>heads (52)</li>\n            <li>eyes (14)</li>\n            <li>mouths (17)</li>\n            <li>outfits (56)</li>\n          </ul>\n          <p>Fly Frogs will be available to purchase from this website starting <strong>Friday Sept. 3 at 4PM EST</strong>.</p>\n          <p>It costs 0.022 ETH to mint a Fly Frog. Limit 30 frogs per transaction. Fly Frogs will be revealed instantly after minting.</p>\n          <p>We&rsquo;re reserving some Fly Frogs for promotions and giveaways. Hop on over to <a href=\"https://twitter.com/FlyFrogsNFT\" target=\"_blank\" className=\"App-link\" rel=\"noreferrer\">Twitter</a> and <a href=\"http://discord.gg/kfp4xftqKM\" target=\"_blank\" className=\"App-link\" rel=\"noreferrer\">Discord</a> to join the Fly Frog community!</p>\n        </div>\n      </section>\n      <footer className=\"App-footer\">\n        <div className=\"App-container\">\n          <a href=\"https://etherscan.io/address/0x31d4Da52c12542AC3D6aAdbA5ed26a3A563a86Dc\" target=\"_blank\" rel=\"noreferrer\">Smart Contract</a>\n          <a href=\"https://twitter.com/FlyFrogsNFT\" target=\"_blank\" rel=\"noreferrer\"><SiTwitter /></a>\n          <a href=\"http://discord.gg/kfp4xftqKM\" target=\"_blank\" rel=\"noreferrer\"><SiDiscord /></a>\n          <a href=\"https://opensea.io/collection/fly-frogs\" target=\"_blank\" rel=\"noreferrer\">OpenSea</a>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}